#{ class
::classname
#=
/** @constructor */
var classname = function(){
var _self = this;
};
classname.prototype._classname = 'classname';
{
  cls:[
    {
      name:classname
    }
  ]
}

#}

#{ parameters
::classname
  param_a\s\$
  param_b\s\? init_val
#=
/**
 * @param {string} param_a
 * @param {string=} opt_param_b
 * @constructor
 */
var classname = function(param_a, opt_param_b){
var _self = this;
  var param_b = opt_param_b === undefined ? (init_val) : opt_param_b;
};
classname.prototype._classname = 'classname';
{
  cls:[
    {
      name:classname
      args:[
        String
        String
      ]
    }
  ]
}

#}

#{ members
::classname
  @param_a\s\ init_val
  @param_b\s\
#=
/** @constructor */
var classname = function(){
var _self = this;
  /**
   * @type {string}
   * @private
   */
  this._param_a = (init_val);
  /**
   * @type {string}
   * @private
   */
  this._param_b = (null);
};
classname.prototype._classname = 'classname';
{
  cls:[
    {
      name:classname
      args:[
        String
        String
      ]
    }
  ]
}

#}

#{ param init members 
::classname
  @param_a\s\$
  @param_b\s\? init_val
  @param_c\s\?
#=
/**
 * @param {string} param_a
 * @param {string=} opt_param_b
 * @param {string=} opt_param_c
 * @constructor
 */
var classname = function(param_a, opt_param_b, opt_param_c){
var _self = this;
  /**
   * @type {string}
   * @private
   */
  this._param_a = param_a;
  /**
   * @type {string}
   * @private
   */
  this._param_b = opt_param_b === undefined ? (init_val) : opt_param_b;
  /**
   * @type {string}
   * @private
   */
  this._param_c = opt_param_c === undefined ? (null) : opt_param_c;
};
classname.prototype._classname = 'classname';
{
  cls:[
    {
      name:classname
      args:[
        String
        String
        String
      ]
    }
  ]
}

#}

#{ multiple classes
::Class1
:method
::Class2
#=
/** @constructor */
var Class1 = function(){
var _self = this;
};
Class1.prototype._classname = 'Class1';
Class1.prototype.method = function(){
var _self = this;
};
/** @constructor */
var Class2 = function(){
var _self = this;
};
Class2.prototype._classname = 'Class2';
{
  cls:[
    {
      name:Class1
      methods:[
        {
          name:method
        }
      ]
    }
    {
      name:Class2
    }
  ]
}

#}
