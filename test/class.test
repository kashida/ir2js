#{ class
::classname
#=
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
var classname = function() {
var self = this;
};
{
  "cls": [
    {
      "name": "classname",
      "args": [],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ parameters
::classname
  param_a\s\$
  param_b\s\? init_val
#=
/**
 * @param {string} param_a
 * @param {string=} opt_param_b
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
var classname = function(param_a, opt_param_b) {
  var self = this;
  var param_b = opt_param_b === undefined ? (init_val) : opt_param_b;
};
{
  "cls": [
    {
      "name": "classname",
      "args": [
        "String",
        "String"
      ],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ members
::classname
  @param_a\s\ init_val
  @param_b\s\
#=
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
var classname = function() {
  var self = this;
  /** @private {string} */
  this._param_a = (init_val);
  /** @private {string} */
  this._param_b = (null);
};
{
  "cls": [
    {
      "name": "classname",
      "args": [],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ param init members 
::classname
  @param_a\s\$
  @param_b\s\? init_val
  @param_c\s\?
#=
/**
 * @param {string} param_a
 * @param {string=} opt_param_b
 * @param {string=} opt_param_c
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
var classname = function(param_a, opt_param_b, opt_param_c) {
  var self = this;
  /** @private {string} */
  this._param_a = param_a;
  /** @private {string} */
  this._param_b = opt_param_b === undefined ? (init_val) : opt_param_b;
  /** @private {string} */
  this._param_c = opt_param_c === undefined ? (null) : opt_param_c;
};
{
  "cls": [
    {
      "name": "classname",
      "args": [
        "String",
        "String",
        "String"
      ],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ multiple classes
::Class1
:method
::Class2
#=
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
var Class1 = function() {
var self = this;
};
Class1.prototype.method = function() {
var self = this;
};
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
var Class2 = function() {
var self = this;
};
{
  "cls": [
    {
      "name": "Class1",
      "args": [],
      "methods": [
        {
          "name": "method",
          "args": [],
          "methods": []
        }
      ]
    },
    {
      "name": "Class2",
      "args": [],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ default class name
::
#=
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
var FileName = function() {
var self = this;
};
{
  "cls": [
    {
      "name": "FileName",
      "args": [],
      "methods": []
    }
  ],
  "fns": []
}
#}
