Test input file formats are:

#{ test name
... file scope ir code ...
#=
... corresponding js code ...
#}

or

#{[package/name] test name
... file scope ir body ...
#=
... corresponding js function code ...
#}

or

#{: test name
... code scope ir body ...
#=
... corresponding js function code ...
#}

Also for tests that are supposed to error:

#!{ test name
... code that should produce compile error ...
#}


:
  _fs := require('fs')
  ir2js := require('ir2js_test')

::TestFile
  @filename\s\$
  @state\s\ ''
  @name\s\ ''
  @packageName\s\ ''
  @input\A.<s>\ []
  @output\A.<s>\ []
  @tests\A.<ir2js.TestCase>\ []
  @isGlobal\b\ false
  @expectError\b\ false
  @failed+\b\ false

:parse
  inputs\s\$
  inputs.split('\n').forEach(##)
    line\s\$
    index\n\$
    @checkLine(line, index)

  if @state != ''
    console.warn(@filename + ': last test did not terminate?')

:@checkLine
  line\s\$
  index\n\$
  input_re := /^#(\!)?\{((:)|\[(.*)\])?\s*(.*\S)\s*$/.exec(line)
  if input_re
    @state = 'i'
    @name = input_re[5]
    @packageName = input_re[4] || ''
    @isGlobal = !input_re[3]
    @expectError = !!input_re[1]
    =>
    
  if /^#\=\s*$/.test(line)
    @state = 'o'
    =>

  if /^#\}\s*$/.test(line)
    @state = ''
    @tests.push(&ir2js.TestCase(#))
      @name
      @packageName
      @input
      @output
      @isGlobal
      @expectError
    @input = []
    @output = []
    =>

  switch @state
    case 'i'
    @input.push(line)
    break

    case 'o'
    @output.push(line)
    break

    case ''
    if !/^\s*$/.test(line)
      console.warn(@filename + ' (line ' + index + ')? ' + line)
    break

:run
  @tests.forEach(##)
    test\%.Test\$
    test.run()
    if test.failed
      //@failed = true
      process.exit(-1)


////////////////////////////////////////////////////////////
starting point.

argv[0] is node binary and argv[1] is the executing js.
:
  process.argv.slice(2).forEach(##)
    infile\s\$
    i\n\$
    contents := _fs.readFileSync(infile, 'utf-8')
    console.log(' [ ' + infile + ' ] ')

    test := &TestFile(infile)
    test.parse(contents)
    test.run()
    if test.failed
      process.exit(-1)

  process.exit(0)
