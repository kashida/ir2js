#{ comment lines
::classname
  // first comment.
  param\b\$
  // second comment.
  @member\b\? true
  // last comment.
#=
/**
 * @param {boolean} param
 * @param {boolean=} opt_member
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
_o_.classname = function(param, opt_member) {
  var self = this;
  // first comment.
  // second comment.
  /** @private {boolean} */
  this._member = opt_member === undefined ? (true) : opt_member;
  // last comment.
};
_o_.classname.prototype._classname = '_o_.classname';
{
  "cls": [
    {
      "name": "_o_.classname",
      "args": [
        "Boolean",
        "Boolean"
      ],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ blank lines
::classname

  param\b\$

  @member\b\? true
#=
/**
 * @param {boolean} param
 * @param {boolean=} opt_member
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
_o_.classname = function(param, opt_member) {
  var self = this;


  /** @private {boolean} */
  this._member = opt_member === undefined ? (true) : opt_member;
};
_o_.classname.prototype._classname = '_o_.classname';
{
  "cls": [
    {
      "name": "_o_.classname",
      "args": [
        "Boolean",
        "Boolean"
      ],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ multi-line init
::classname
  param\n\? a + b
  | + c + d
  @member\n\? func(#)
    a
    b
    c
#=
/**
 * @param {number=} opt_param
 * @param {number=} opt_member
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
_o_.classname = function(opt_param, opt_member) {
  var self = this;
  var param = opt_param === undefined ? (a + b + c + d) : opt_param;
  /** @private {number} */
  this._member = opt_member === undefined ? (func(
    a,
    b,
    c
  )) : opt_member;
};
_o_.classname.prototype._classname = '_o_.classname';
{
  "cls": [
    {
      "name": "_o_.classname",
      "args": [
        "Number",
        "Number"
      ],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ re with param format in it
::Class
:method
  if /^\s*\/\//.test(@str)
    =>
#=
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
_o_.Class = function() {
var self = this;
};
_o_.Class.prototype._classname = '_o_.Class';
_o_.Class.prototype.method = function() {
  var self = this;
  if (/^\s*\/\//.test(self._str)) {
    return;
  }
};
{
  "cls": [
    {
      "name": "_o_.Class",
      "args": [],
      "methods": [
        {
          "name": "method",
          "args": [],
          "methods": []
        }
      ]
    }
  ],
  "fns": []
}
#}

#{[aa.bb.cc] shorthand ctor call
::classname
  param+\\? x.ABC(a + b)
  @member\\ ~.xyz.ABC(#)
    a
    b
    c
#=
/**
 * @param {!x.ABC=} opt_param
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
_o_.aa.bb.cc.classname = function(opt_param) {
  var self = this;
  var param = opt_param === undefined ? (new x.ABC(a + b)) : opt_param;
  /** @private {!_o_.aa.bb.cc.xyz.ABC} */
  this._member = (new _o_.aa.bb.cc.xyz.ABC(
    a,
    b,
    c
  ));
};
_o_.aa.bb.cc.classname.prototype._classname = '_o_.aa.bb.cc.classname';
{
  "cls": [
    {
      "name": "_o_.aa.bb.cc.classname",
      "args": [
        "x.ABC",
        "_o_.aa.bb.cc.xyz.ABC"
      ],
      "methods": []
    }
  ],
  "fns": []
}
#}
