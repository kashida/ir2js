#{: anonymous function param types
abc(##)
  \b\
  param0\s\$
  param1\n\$
  body0
  body1
#=
abc(
/**
 * @param {string} param0
 * @param {number} param1
 * @return {boolean}
 */
function(param0, param1) {
  body0;
  body1;
});
#}

#{: type annotation short hand
abc(##)
  \b\
  param0\s\$
  param1\n\$
  param2\O<s,s>\?
  param3\F\?
  body0
  body1
#=
abc(
/**
 * @param {string} param0
 * @param {number} param1
 * @param {!Object.<string,string>=} param2
 * @param {!Function=} param3
 * @return {boolean}
 */
function(param0, param1, param2, param3) {
  body0;
  body1;
});
#}

#{ global function param types
:::func_name = ##
  param0\s\$
  param1\n\? value
  param2\Test|-\?
  a := param0
  c := param1
#=
var func_name = /**
 * @param {string} param0
 * @param {number=} opt_param1
 * @param {!Test|null=} param2
 */
function(param0, opt_param1, param2) {
  var param1 = opt_param1 === undefined ? (value) : opt_param1;
  var a;
  a = param0;
  var c;
  c = param1;
};
{
  "cls": [],
  "fns": []
}
#}

#{[some.package] special arg types
::func_name = ##
  p0\s\$
  p1\~SomeClass|-\?
  p2\n|-\?
  p3\RegExp\?
#=
$some.package.func_name = /**
 * @param {string} p0
 * @param {!$some.package.SomeClass|null=} p1
 * @param {number|null=} p2
 * @param {!RegExp=} p3
 */
function(p0, p1, p2, p3) {
};
{
  "cls": [],
  "fns": []
}
#}

#{ method param types
::classname

:methodname1
  param_a\s\$
  param_b\Test\? init_val

:@methodname2
#=
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
var classname = function() {
var self = this;
};

/**
 * @param {string} param_a
 * @param {!Test=} opt_param_b
 */
classname.prototype.methodname1 = function(param_a, opt_param_b) {
  var self = this;
  var param_b = opt_param_b === undefined ? (init_val) : opt_param_b;
};

/** @private */
classname.prototype._methodname2 = function() {
var self = this;
};
{
  "cls": [
    {
      "name": "classname",
      "args": [],
      "methods": [
        {
          "name": "methodname1",
          "args": [
            "String",
            "Test"
          ],
          "methods": []
        },
        {
          "name": "_methodname2",
          "args": [],
          "methods": []
        }
      ]
    }
  ],
  "fns": []
}
#}

#{ class
::classname
#=
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
var classname = function() {
var self = this;
};
{
  "cls": [
    {
      "name": "classname",
      "args": [],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ class ctor param types
::classname
  param_a\s\$
  param_b\n\? init_val
#=
/**
 * @param {string} param_a
 * @param {number=} opt_param_b
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
var classname = function(param_a, opt_param_b) {
  var self = this;
  var param_b = opt_param_b === undefined ? (init_val) : opt_param_b;
};
{
  "cls": [
    {
      "name": "classname",
      "args": [
        "String",
        "Number"
      ],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ member types
::classname
  @param_a\s\ init_val
  @param_b\n\
#=
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
var classname = function() {
  var self = this;
  /** @private {string} */
  this._param_a = (init_val);
  /** @private {number} */
  this._param_b = (null);
};
{
  "cls": [
    {
      "name": "classname",
      "args": [],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ types with param init members 
::classname
  @param_a\s\$
  @param_b\n\? init_val
#=
/**
 * @param {string} param_a
 * @param {number=} opt_param_b
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
var classname = function(param_a, opt_param_b) {
  var self = this;
  /** @private {string} */
  this._param_a = param_a;
  /** @private {number} */
  this._param_b = opt_param_b === undefined ? (init_val) : opt_param_b;
};
{
  "cls": [
    {
      "name": "classname",
      "args": [
        "String",
        "Number"
      ],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ read only accessor
::classname
  @param+\s\
#=
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
var classname = function() {
  var self = this;
  /** @private {string} */
  this._param = (null);
};
/** @type {string} */
classname.prototype.param;
classname.prototype.__defineGetter__('param', function() {
return this._param;
});
{
  "cls": [
    {
      "name": "classname",
      "args": [],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ read / write
::classname
  @param0&\s\
  @param1&\Test\
#=
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
var classname = function() {
  var self = this;
  /** @private {string} */
  this._param0 = (null);
  /** @private {!Test} */
  this._param1 = (null);
};
/** @type {string} */
classname.prototype.param0;
classname.prototype.__defineGetter__('param0', function() {
return this._param0;
});
classname.prototype.__defineSetter__('param0', function(value) {
this._param0 = value;
});
/** @type {!Test} */
classname.prototype.param1;
classname.prototype.__defineGetter__('param1', function() {
return this._param1;
});
classname.prototype.__defineSetter__('param1', function(value) {
this._param1 = value;
});
{
  "cls": [
    {
      "name": "classname",
      "args": [],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{: cast
a = \b\(b)
a = \f(n):s\(b)
#=
a = /** @type {boolean} */(b);
a = /** @type {function(number):string} */(b);
#}
