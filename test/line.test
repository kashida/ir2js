#{: semicolon
abc - def
#=
abc - def;
#}

#{: multiline object
a := {#}
  x: line1
  y: line2
  z: line3
#=
var a;
a = {
  x: line1,
  y: line2,
  z: line3
};
#}

#{: multiline object 2
a := {#} + x
  x: line1
  y: line2
  z: line3
#=
var a;
a = {
  x: line1,
  y: line2,
  z: line3
} + x;
#}

#{: multiline array
a := [#]
  line1
  line2
  line3
#=
var a;
a = [
  line1,
  line2,
  line3
];
#}

#{: multiline array 2
a := [#] + x
  line1
  line2
  line3
#=
var a;
a = [
  line1,
  line2,
  line3
] + x;
#}

#{: multiline parenthesis
a := (#)
  line1
  line2
  line3
#=
var a;
a = (
  line1,
  line2,
  line3
);
#}

#{: multiline parenthesis 2
a := (#) + x
  line1
  line2
  line3
#=
var a;
a = (
  line1,
  line2,
  line3
) + x;
#}

#{: binary-op block
a := #+ * 0
  123
  a + b
  f(x)
#=
var a;
a = (
  (123) +
  (a + b) +
  (f(x))
) * 0;
#}

#{: binary-op block 2
a := #&&
  f(#* + 3)
    123
    a + b
    f(x)
  is_true
  #||
    condition0
    condition1
#=
var a;
a = (
  (f((
    (123) *
    (a + b) *
    (f(x))
  ) + 3)) &&
  (is_true) &&
  ((
    (condition0) ||
    (condition1)
  ))
);
#}

#{: dot-op block
a := #.
  new SomeClass(#)
    0
    abc
  do_something
  get_result
#=
var a;
a = (
  (new SomeClass(
    0,
    abc
  )).
  (do_something).
  (get_result)
);
#}

#{: single line marker
a = # + # - (#)
  0
  1
  --
  3
b = #
  abc
c = (#) + # * #
  x
  y
  z
  --
  0 + 1
  2 * 3
#=
a = (
  0
) + (
  1
) - (
  3
);
b = (
  abc
);
c = (
  x,
  y,
  z
) + (
  0 + 1
) * (
  2 * 3
);
#}

#{: conditional marker
a = #? / # + #? * (#)
  some_condition()
  true_result
  false_result
  --
  3
  --
  a + b + is_test()
  3 + 3 / 2
  a = 3
  --
  list0
  list1
#=
a = (
  (some_condition()) ?
  (true_result) :
  (false_result)
) / (
  3
) + (
  (a + b + is_test()) ?
  (3 + 3 / 2) :
  (a = 3)
) * (
  list0,
  list1
);
#}

#{: block statement
if xyz
  aaa
  bbb
  ccc
#=
if (xyz) {
  aaa;
  bbb;
  ccc;
}
#}

#{: block statement 2
do
  aaa
  bbb
  ccc
while xyz
#=
do {
  aaa;
  bbb;
  ccc;
}
while (xyz);
#}

#{: block statement with comment
if test
  // comment.
  method(param)
#=
if (test) {
  // comment.
  method(param);
}
#}

#{: if / else
if test
  aaa
else
  bbb
#=
if (test) {
  aaa;
}
else {
  bbb;
}
#}

#{: multi-level
if xyz
  aaa
  a := func(#) + x
    line1
    line2
    line3
#=
if (xyz) {
  aaa;
  var a;
  a = func(
    line1,
    line2,
    line3
  ) + x;
}
#}

#{: anonym-function
func(##, this)
  p0\n\$
  p1\n\$
  p2\n\$
  statement0
  statement1
#=
func(
/**
 * @param {number} p0
 * @param {number} p1
 * @param {number} p2
 */
function(p0, p1, p2) {
  statement0;
  statement1;
}, this);
#}

#{: multi-block line
a := [#] + {#} + ##
  arr0
  arr1
  --
  abc: def
  ghi: jkl
  --
  param0\b\$
  param1\b\$
  statement0
  statement1
#=
var a;
a = [
  arr0,
  arr1
] + {
  abc: def,
  ghi: jkl
} +
/**
 * @param {boolean} param0
 * @param {boolean} param1
 */
function(param0, param1) {
  statement0;
  statement1;
};
#}

#{: hash in a string
a := '#fff'
#=
var a;
a = '#fff';
#}

#{: line continuation
aaa -
|  bbb +
|  ccc
#=
aaa - bbb + ccc;
#}

#{: line continuation with block
aaa + [#]
  bbb
|  * ccc
#=
aaa + [
  bbb
] * ccc;
#}
