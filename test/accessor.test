#{ private
::classname
  @param\s\
#=
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
_o_.classname = function() {
  var self = this;
  /** @private {string} */
  this._param = (null);
};
_o_.classname.prototype._classname = '_o_.classname';
{
  "cls": [
    {
      "name": "_o_.classname",
      "args": [
        "String"
      ],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ getter and setter
::classname
  @param0+\s\
  @param1*\s\
  @param2&\s\
#=
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
_o_.classname = function() {
  var self = this;
  /** @private {string} */
  this._param0 = (null);
  /** @private {string} */
  this._param1 = (null);
  /** @private {string} */
  this._param2 = (null);
};
_o_.classname.prototype._classname = '_o_.classname';
/** @type {string} */
_o_.classname.prototype.param0;
_o_.classname.prototype.__defineGetter__('param0', function() {
return this._param0;
});
/** @type {string} */
_o_.classname.prototype.param1;
_o_.classname.prototype.__defineSetter__('param1', function(value) {
this._param1 = value;
});
/** @type {string} */
_o_.classname.prototype.param2;
_o_.classname.prototype.__defineGetter__('param2', function() {
return this._param2;
});
_o_.classname.prototype.__defineSetter__('param2', function(value) {
this._param2 = value;
});
{
  "cls": [
    {
      "name": "_o_.classname",
      "args": [
        "String",
        "String",
        "String"
      ],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ overriding getter and setter
::classname
  @member\s\
  @member2\A<s>\
:member+
  => ''
:member*
  do_something_with(value)
:member2+
  => ''
#=
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
_o_.classname = function() {
  var self = this;
  /** @private {string} */
  this._member = (null);
  /** @private {!Array.<string>} */
  this._member2 = (null);
};
_o_.classname.prototype._classname = '_o_.classname';
/** @type {string} */
_o_.classname.prototype.member;
_o_.classname.prototype.__defineGetter__('member', function() {
  var self = this;
  return ('');
});
_o_.classname.prototype.__defineSetter__('member', function(value) {
  var self = this;
  do_something_with(value);
});
/** @type {!Array.<string>} */
_o_.classname.prototype.member2;
_o_.classname.prototype.__defineGetter__('member2', function() {
  var self = this;
  return ('');
});
{
  "cls": [
    {
      "name": "_o_.classname",
      "args": [
        "String",
        null
      ],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ overriding getter only
::classname
  @member*\s\
:member+
  do_something()
#=
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
_o_.classname = function() {
  var self = this;
  /** @private {string} */
  this._member = (null);
};
_o_.classname.prototype._classname = '_o_.classname';
/** @type {string} */
_o_.classname.prototype.member;
_o_.classname.prototype.__defineSetter__('member', function(value) {
this._member = value;
});
_o_.classname.prototype.__defineGetter__('member', function() {
  var self = this;
  do_something();
});
{
  "cls": [
    {
      "name": "_o_.classname",
      "args": [
        "String"
      ],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ accessor w/o member
::classname
:member+\s\
  => ''
:member*
  v\s\$
  do_something_with(v)
:member2+\A<s>\
  => ''
#=
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
_o_.classname = function() {
var self = this;
};
_o_.classname.prototype._classname = '_o_.classname';
/** @type {string} */
_o_.classname.prototype.member;
_o_.classname.prototype.__defineGetter__('member', function() {
  var self = this;
  return ('');
});
_o_.classname.prototype.__defineSetter__('member', function(v) {
  var self = this;
  do_something_with(v);
});
/** @type {!Array.<string>} */
_o_.classname.prototype.member2;
_o_.classname.prototype.__defineGetter__('member2', function() {
  var self = this;
  return ('');
});
{
  "cls": [
    {
      "name": "_o_.classname",
      "args": [],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ accessor w/o member flip order
::classname
:member*
  v\s\$
  do_something_with(v)
:member+\s\
  => ''
#=
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
_o_.classname = function() {
var self = this;
};
_o_.classname.prototype._classname = '_o_.classname';
/** @type {string} */
_o_.classname.prototype.member;
_o_.classname.prototype.__defineSetter__('member', function(v) {
  var self = this;
  do_something_with(v);
});
_o_.classname.prototype.__defineGetter__('member', function() {
  var self = this;
  return ('');
});
{
  "cls": [
    {
      "name": "_o_.classname",
      "args": [],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{: no method change
@method()
obj.method()
'2d' - @pixels()
'2d @pixels()'
#=
self._method();
obj.method();
'2d' - self._pixels();
'2d @pixels()';
#}

#{: self ref
a = @member
@member = a
#=
a = self._member;
self._member = a;
#}

#{: other ref -- no more xform
a = obj.member
obj.member = a
#=
a = obj.member;
obj.member = a;
#}

#{: equality should not become set_member
obj.member == a
#=
obj.member === a;
#}

#{: direct member access -- no more special.
obj.member = a
obj._member = a
#=
obj.member = a;
obj._member = a;
#}

#{: no conversion in string
'a.b'
#=
'a.b';
#}

#{: no repeated application of transform with a block
if str.length
  =>
if str.length
  =>
#=
if (str.length) {
  return;
}
if (str.length) {
  return;
}
#}
