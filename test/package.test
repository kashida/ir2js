#{[abc.def] self reference
:
  a(~.call_function())
#=
  a($abc.def.call_function());
{
  "cls": [],
  "fns": []
}
#}

#{[abc.def] self class reference.
::K

:m
  a(~call_function(), a instanceof ~)
#=
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
$abc.def.K = function() {
var self = this;
};
$abc.def.K.prototype._classname = '$abc.def.K';

$abc.def.K.prototype.m = function() {
  var self = this;
  a($abc.def.K.call_function(), a instanceof $abc.def.K);
};
{
  "cls": [
    {
      "name": "$abc.def.K",
      "args": [],
      "methods": [
        {
          "name": "m",
          "args": [],
          "methods": []
        }
      ]
    }
  ],
  "fns": []
}
#}

#{[abc.def] class
::classname ^~path.parent
  @param\s\? ~.value
  ^(param)

:methodname\\
  param\n\$
  a(~.something)
  ^(param, 0)
#=
/**
 * @param {string=} opt_param
 * @constructor
 * @extends {$abc.def.path.parent}
 * @struct
 * @suppress {checkStructDictInheritance}
 */
$abc.def.classname = function(opt_param) {
  var self = this;
  /** @private {string} */
  this._param = opt_param === undefined ? ($abc.def.value) : opt_param;
  $abc.def.path.parent.call(this, param);
};
goog.inherits($abc.def.classname, $abc.def.path.parent);
$abc.def.classname.prototype._classname = '$abc.def.classname';

/** @param {number} param */
$abc.def.classname.prototype.methodname = function(param) {
  var self = this;
  a($abc.def.something);
  $abc.def.path.parent.prototype.methodname.call(this, param, 0);
};
{
  "cls": [
    {
      "name": "$abc.def.classname",
      "args": [
        "String"
      ],
      "parent": "$abc.def.path.parent",
      "methods": [
        {
          "name": "methodname",
          "args": [
            "Number"
          ],
          "methods": []
        }
      ]
    }
  ],
  "fns": []
}
#}

#{[abc.def] type
::func = ##
  \~some.type\
  p0\~another.type\$
  p1\A<$yet.another.type>\? $global.value
#=
$abc.def.func = /**
 * @param {!$abc.def.another.type} p0
 * @param {!Array.<!$yet.another.type>=} opt_p1
 * @return {!$abc.def.some.type}
 */
function(p0, opt_p1) {
  var p1 = opt_p1 === undefined ? ($global.value) : opt_p1;
};
{
  "cls": [],
  "fns": []
}
#}

#{[abc.def] package ref member lookup
:
  ~.varname
  ~.varname
#=
  $abc.def.varname;
  $abc.def.varname;
{
  "cls": [],
  "fns": []
}
#}

#{[abc.def] class statkc
::Abc

:def = ##
  param\s\$
  do_something()

:ghi
  ~def('jkl')
#=
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 */
$abc.def.Abc = function() {
var self = this;
};
$abc.def.Abc.prototype._classname = '$abc.def.Abc';

$abc.def.Abc.def = /** @param {string} param */
function(param) {
  do_something();
};

$abc.def.Abc.prototype.ghi = function() {
  var self = this;
  $abc.def.Abc.def('jkl');
};
{
  "cls": [
    {
      "name": "$abc.def.Abc",
      "args": [],
      "methods": [
        {
          "name": "ghi",
          "args": [],
          "methods": []
        }
      ]
    }
  ],
  "fns": []
}
#}
