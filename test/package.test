#{[abc.def] self reference
:
  a(%.call_function())
#=
  a(abc.def.call_function());
{
  "cls": [],
  "fns": []
}
#}

#{[abc.def] up reference
:
  a(%%.call_function(), %%%.call_function())
#=
  a(abc.call_function(), call_function());
{
  "cls": [],
  "fns": []
}
#}

#{[abc.def] class
::classname <%.path.parent
  @param\s\? %.value
  ^(param)

:methodname\\
  param\n\$
  a(%.something)
  ^(param, 0)
#=
/**
 * @param {string=} opt_param
 * @constructor
 * @extends {abc.def.path.parent}
 * @struct
 * @suppress {checkStructDictInheritance}
 */
abc.def.classname = function(opt_param) {
  var self = this;
  /** @private {string} */
  this._param = opt_param === undefined ? (abc.def.value) : opt_param;
  abc.def.path.parent.call(this, param);
};
goog.inherits(abc.def.classname, abc.def.path.parent);
abc.def.classname.prototype._classname = 'abc.def.classname';

/** @param {number} param */
abc.def.classname.prototype.methodname = function(param) {
  var self = this;
  a(abc.def.something);
  abc.def.path.parent.prototype.methodname.call(this, param, 0);
};
{
  "cls": [
    {
      "name": "abc.def.classname",
      "args": [
        "String"
      ],
      "parent": "abc.def.path.parent",
      "methods": [
        {
          "name": "methodname",
          "args": [
            "Number"
          ],
          "methods": []
        }
      ]
    }
  ],
  "fns": []
}
#}

#{[abc.def] type
::func = ##
  \%.some.type\
  p0\%.another.type\$
  p1\A<%%.yet.another.type>\? %%%%.global.value
#=
abc.def.func = /**
 * @param {!abc.def.another.type} p0
 * @param {!Array.<!abc.yet.another.type>=} opt_p1
 * @return {!abc.def.some.type}
 */
function(p0, opt_p1) {
  var p1 = opt_p1 === undefined ? (global.value) : opt_p1;
};
{
  "cls": [],
  "fns": []
}
#}

#{[abc.def] package ref member lookup
:
  %.varname
  %.varname
#=
  abc.def.varname;
  abc.def.varname;
{
  "cls": [],
  "fns": []
}
#}
