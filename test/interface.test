#{ interface
::?name

:method\b\
  p0\s\$
  p1\n\?
#=
/** @interface */
_o_.name = function() {};
_o_.name.prototype._classname = '_o_.name';

/**
 * @param {string} p0
 * @param {number=} p1
 * @return {boolean}
 */
_o_.name.prototype.method = function(p0, p1) {};
{
  "cls": [
    {
      "name": "_o_.name",
      "args": [],
      "methods": [
        {
          "name": "method",
          "args": [
            "String",
            "Number"
          ],
          "methods": []
        }
      ]
    }
  ],
  "fns": []
}
#}

#{ class that implements interfaces
::?iface0
::?iface1
::?iface2; iface1
::classname; iface0 iface2
#=
/** @interface */
_o_.iface0 = function() {};
_o_.iface0.prototype._classname = '_o_.iface0';
/** @interface */
_o_.iface1 = function() {};
_o_.iface1.prototype._classname = '_o_.iface1';
/**
 * @interface
 * @extends {iface1}
 */
_o_.iface2 = function() {};
_o_.iface2.prototype._classname = '_o_.iface2';
/**
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 * @implements {iface0}
 * @implements {iface2}
 */
_o_.classname = function() {
var self = this;
};
_o_.classname.prototype._classname = '_o_.classname';
{
  "cls": [
    {
      "name": "_o_.iface0",
      "args": [],
      "methods": []
    },
    {
      "name": "_o_.iface1",
      "args": [],
      "methods": []
    },
    {
      "name": "_o_.iface2",
      "args": [],
      "methods": []
    },
    {
      "name": "_o_.classname",
      "args": [],
      "methods": []
    }
  ],
  "fns": []
}
#}

#{ interface with generics
::?iface0<T,U,V>
:m0<W>\T\
  p0\U\$

::?iface1<X>
:m1<Y>\s\
  p0\Y\$

::?iface2<B,C>; iface0<n,B,V>

::classname<Z>; iface0<s,n,Z> iface2<B<n>,C>
:m0<W>\s\
  p0\n\$

:m1<Y>\s\
  p0\Y\$
#=
/**
 * @interface
 * @template T,U,V
 */
_o_.iface0 = function() {};
_o_.iface0.prototype._classname = '_o_.iface0';
/**
 * @param {!U} p0
 * @return {!T}
 * @template W
 */
_o_.iface0.prototype.m0 = function(p0) {};

/**
 * @interface
 * @template X
 */
_o_.iface1 = function() {};
_o_.iface1.prototype._classname = '_o_.iface1';
/**
 * @param {!Y} p0
 * @return {string}
 * @template Y
 */
_o_.iface1.prototype.m1 = function(p0) {};

/**
 * @interface
 * @template B,C
 * @extends {iface0.<number,!B,!V>}
 */
_o_.iface2 = function() {};
_o_.iface2.prototype._classname = '_o_.iface2';

/**
 * @template Z
 * @constructor
 * @struct
 * @suppress {checkStructDictInheritance}
 * @implements {iface0.<string,number,!Z>}
 * @implements {iface2.<!B.<number>,!C>}
 */
_o_.classname = function() {
var self = this;
};
_o_.classname.prototype._classname = '_o_.classname';
/**
 * @param {number} p0
 * @return {string}
 * @template W
 */
_o_.classname.prototype.m0 = function(p0) {
  var self = this;
};

/**
 * @param {!Y} p0
 * @return {string}
 * @template Y
 */
_o_.classname.prototype.m1 = function(p0) {
  var self = this;
};
{
  "cls": [
    {
      "name": "_o_.iface0",
      "args": [],
      "methods": [
        {
          "name": "m0",
          "args": [
            "U"
          ],
          "methods": []
        }
      ]
    },
    {
      "name": "_o_.iface1",
      "args": [],
      "methods": [
        {
          "name": "m1",
          "args": [
            "Y"
          ],
          "methods": []
        }
      ]
    },
    {
      "name": "_o_.iface2",
      "args": [],
      "methods": []
    },
    {
      "name": "_o_.classname",
      "args": [],
      "methods": [
        {
          "name": "m0",
          "args": [
            "Number"
          ],
          "methods": []
        },
        {
          "name": "m1",
          "args": [
            "Y"
          ],
          "methods": []
        }
      ]
    }
  ],
  "fns": []
}
#}
