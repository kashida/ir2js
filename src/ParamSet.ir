:
  ARG_TYPE_REPLACE_MAP := {#}
    'boolean': 'Boolean'
    'function': 'Function'
    'string': 'String'
    'number': 'Number'
    // black list this one because closure compiler warns the refernce to this
    // constructor prevents some optimizations.
    'RegExp': 'null'

::ParamSet
  @context\!context.Context\$
  @block\IndentBlock\$
  @isCtor\b\? false
  @params\A.<!Param>\ []
  @returnType\type.Decoder\

:transform
  param_done := false
  @block.eachLine(##, @context)
    line\SectionLine\$
    i\n\$
    if param_done
      =>
    if line instanceof SeparatorLine
      param_done = true
      =>
    if line instanceof CodeLine && !line.isContinuation
      p := @addLine(\CodeLine\(line), i)
      if p
        line.param = p
      else
        param_done = true
    // skip invalid lines and continuation lines.

:@addLine\Param|b\
  line\CodeLine\$
  index\n\$
  p := &Param(@context, @isCtor, line.input, line.parsed)
  if !p.success
    if index != 0 || @context.isFileScope
      => null
    // could be the return type.
    => @tryReturnType(line.str)

  @params.push(p)
  if p.isMember
    @context.cls.addMember(p.name, p.type, p.accessType)
  => p

:@tryReturnType\b\
  line\s\$
  re := /^\s*\\(.*)\\\s*$/.exec(line)
  if !re
    => false
  @returnType = &type.Decoder(@context.pkg, re[1])
  => true

:setReturnType
  return_type\s\$
  if return_type
    @returnType = &type.Decoder(@context.pkg, return_type)

:isEmpty\b\
  => @params.length == 0

:isInitEmpty\b\
  => !@params.some(##)
    p\Param\$
    => p.isMember || p.initType == '?'

:isDeclEmpty\b\
  => !@returnType && !@params.some(##)
    p\Param\$
    => !!p.type

:outputDecls\!A.<s>\
  result := @params.map(##).filter(##)
    p\Param\$
    => p.outputDecl()
    --
    s\s\$
    => !!s
  if @returnType
    result.push('@return {' + @returnType.output() + '}')
  => result

:outputParams\s\
  // function parameter output.
  => @params.map(##).filter(##).join(', ')
    p\Param\$
    => p.outputParam()
    --
    s\s\$
    => !!s

:outputArgTypes\s\
  => '[' + @params.map(##).join(', ') + ']'
    p\Param\$
    => p.outputArgType()

:setArgTypes
  types\type.Callable\$
  @params.forEach(##)
    p\!Param\$
    types.addArg(p.argtype())
