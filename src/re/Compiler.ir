The pattern is expressed as a tree of RegExp, Arrays, and Objects.
RegExp should not include parens. Arrays are sequence of patterns.
Each member of Objects are converted to alternative pattens. The result Objects
will have field names mathcing these object field names.
There are two meta data in the Object.
_s (string) : suffix to the group, e.g. '?', '*', etc.
_w (boolean, default true): add any number of spaces '\s*' before and after.

The result of eval is either null (when the match afils), or an Object.
Object has resulting partial matches.

The regexp is always bound to both begenning and end (^ and $ added
automatically).

If 'global' flag is true, multiple match is possible.
  regex := &re.Compiler(pattern, true)
  m := regex.eval(input_str)
  while m && m.some_property
    ...do something with m...
    m = regex.eval(input_str)

To reset the RegExp object, do: regex.eval('')

::
  @pattern\O\$
  @global\b\? false
  @extractors\A<%.Extractor|s|->\ []
  @regex\RegExp\ @build()

:eval\O|-\
  str\s\$
  match := @regex.exec(str)
  if !match
    => null

  result := {}
  @extractors.forEach(##)
    extractor\%.Extractor|s|-\$
    i\n\$
    if extractor instanceof %.Extractor
      result[extractor.name] = extractor.value(match[i])
    else if extractor
      result[extractor] = match[i]
  => result

:@build\RegExp\
  @extractors.push(null)
  regexp := @buildReStr(@pattern, null)
  if !@global
    regexp = '^' + regexp + '$'
  //l(regexp, 'regexp')
  => &RegExp(regexp, @global ? 'g' : '')

:@buildReStr\s\
  pattern\O\$
  matcher\%.Matcher|-\$
  if pattern instanceof RegExp
    @extractors.push(null)
    pstr := pattern.toString()
    => '(' + pstr.substring(1, pstr.length - 1) + ')'

  if pattern instanceof Array
    @extractors.push(null)
    => '(' + pattern.map(##).join('') + ')'
      item\O\$
      => @buildReStr(item, matcher)

  if pattern instanceof %.Matcher
    => @buildReStr(pattern.re(), pattern)

  => @buildReStrWithMap(pattern, matcher)

:@buildReStrWithMap
  pattern\O\$
  matcher\%.Matcher|-\$
  @extractors.push(null)
  alts := []
  each name in pattern
    if name == '_s' || name == '_w'
      continue

    if name != '_'
      @setCurrent(name, matcher)
    alts.push(@buildReStr(pattern[name], matcher))

  opt := pattern._s || ''
  spc := pattern['_w'] == false ? '' : '\\s*'
  => spc + '(' + alts.join('|') + ')' + opt + spc

:@setCurrent
  name\s\$
  matcher\%.Matcher|-\$
  @extractors[@extractors.length - 1] = matcher ? # : name
    &%.Extractor(name, matcher)
