::^%.Callable
  context\context.Context\$
  return_type\s\$
  tmpl_vars\A<s>\$
  @overriding\b\$
  context.isMethod = true
  ^(context, return_type, tmpl_vars)

:re = [#]
  {att: /\@/, _opt: true}
  {name: /[a-zA-Z]\w*/}
  {overriding: /\^/, _opt: true}
  {_: [#], _opt: true}
    /\</
    {tmplVars: /[\w\s\,]+/}
    /\>/
  {_: [#], _opt: true}
    /\\/
    {returnType: /.*/}
    /\\/

:create =##
  \%.Method|-\
  scope\FileScope\$
  line\s\$
  header\input.Line\$
  m := &re.Compiler(%.Method.re).eval(line)
  if !m
    => null

  tmplVars := ##
    vars\s\$
    => vars ? vars.split(',').map(##) : []
      name\s\$
      => name.trim()

  // we should have seen a ctor.
  if !scope.context.cls
    error(header, 'method marker w/o class')
    => null
  ret_type := m.returnType ? # : ''
    &type.Parser(scope.context, header, m.returnType).parse()
  => &%.Method(#)
      scope.copyContext(scope.context.cls.methodName((m.att ? '_' : '') + m.name))
      ret_type
      tmplVars(m.tmplVars)
      !!m.overriding

:output\A\
  decls := []
  if @overriding
    decls = ['@override']
  else
    decls = @.params.outputDecls()
  if /^_/.test(@.context.name.id)
    decls.push('@private')
  => [#]
    docLines(decls)
    @.outputFunc()
    whitespaces(@.block(0).indent) + 'var self = this;'
    @.outputBody('};')

:setType^
  types\s\$
  @.params.setArgTypes(#)
    types.getCurrentCtor().addMethod(@.context.name.id)
