::^~Callable
  context\$context.Context\$
  tmpl_vars\A<s>\$
  // This is actually rendered as @extends.
  @impls\A<~Implements>\$
  context.isCtor = true
  ^(context, '', tmpl_vars)

:re = [#]
  /\:\?/
  &$re.Id('name', true)
  &$re.TmplVarList('tmplVars')
  {_: [#], _s: '?'}
    /\;/
    {rest: /.*/}

:create = ##
  \~|-\
  scope\FileScope\$
  line\s\$
  header\$input.Line\$
  m := &$re.Compiler(~.re).eval(line)
  if !m
    => null

  scope.context.cls = &$context.Class(true)
  ctor := &~(#)
    scope.copyContextWithName(m.name)
    m.tmplVars
    ~Implements.create(scope.context, header, m.rest || '')
  scope.context.cls.ctor = ctor
  scope.types.addCtor(ctor.name())
  => ctor

:transform^
  assert(@.numBlocks() == 0 || @.lines.length == 0, @.lines[0])

:output\A\
  decl := ['@interface']
  if @.tmplVars.length > 0
    decl.push('@template ' + @.tmplVars.join(','))
  @impls.forEach(##)
    impl\~Implements\$
    decl.push(impl.ifaceOutput())
  => [#]
    docLines(decl)
    @.context.name.decl + ' = function() {};'
