::^%.Code
  @context\context.Context\$
  @line\input.Line\$
  @scopeLevel\n\$
  @isPrivate\b\$
  rhs\s\$
  @codeLine\CodeLine|-\
  ^()
  code_input := &input.Line(@line.file, rhs, @line.rowIndex)
  @codeLine = &CodeLine(@context, code_input, &LineParser(code_input))

:close^
  c := &CodeScope(@context, @)
  c.process(@.lines)

:transform^
  @.blocks.forEach(##)
    block\IndentBlock\$
    if block.hasValidLine
      @codeLine.addBlock(block)
  @codeLine.transform()

:output\A\
  if @scopeLevel == 0 && !@context.cls
    error(@line, 'class scope outside of class.')
  out := @codeLine.output()
  out.linePrefix = @context.scopedName(@scopeLevel).decl + ' = ' + out.linePrefix
  out.lineSuffix += ';'
  => [out.output, @.blocks.map(##)]
    block\IndentBlock\$
    => block.hasValidLine ? [] : block.output()
