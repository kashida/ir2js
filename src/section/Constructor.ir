::Constructor <%.Callable
  context\!context.Context\$
  @parent\s?\?
  context.isCtor = true
  ^(context, '')
  @parent = @parent ? @.context.pkg.replace(@parent) : ''

:parentName\s\
  => \s\(@parent)

:<transform
  assert(@.numBlocks() == 1, @.lines[0])
  @.params = &ParamSet(@.context, @.block(0), true)
  @.params.transform()
  @.block(0).transform()

:output\A\
  decl := @.params.outputDecls()
  decl.push('@constructor')
  inherit := []
  if @parent
    decl.push('@extends {' + @parent + '}')
    inherit.push([#].join(''))
      @.context.name.ref()
      '.prototype = Object.create('
      @parent
      '.prototype);'
  => [#]
    docLines(decl)
    @.outputFunc()
    whitespaces(@.block(0).indent) + 'var self = this;'
    @.outputBody('};')
    inherit
    [#].join('')
      @.context.name.property('_classname').decl()
      " = '"
      @.context.name.ref()
      "';"
    @.context.cls.outputAccessors()

:<setType
  types\s\$
  @.params.setArgTypes(types.getCurrentCtor())
