::^~Callable
  context\$context.Context\$
  tmpl_vars\A<s>\$
  @parent\s|-\$
  @parentFull\s|-\$
  @impls\A<~Implements>\$
  context.isCtor = true
  ^(context, '', tmpl_vars)
  @parentFull = @parentFull ? @.context.pkg.replace(@parentFull) : ''

:re = [#]
  /\:/
  &$re.Id('name', true)
  &$re.TmplVarList('tmplVars')
  {_: [#], _s: '?'}
    /\^/
    &$re.QualifiedId('parentName')
    &$re.TmplVarList('pTmplVars')
  {_: [#], _s: '?'}
    /\;/
    {rest: /.*/}

:create = ##
  \~|-\
  scope\FileScope\$
  line\s\$
  header\$input.Line\$
  m := &$re.Compiler(~.re).eval(line)
  if !m
    => null

  scope.context.cls = &$context.Class()
  ctor := &~(#)
    scope.copyContextWithName(m.name)
    m.tmplVars
    m.parentName ? # : null
      &$type.SingleParser(scope.context, header, m.parentName).parse()
    m.parentName ? # : null
      &$type.SingleParser(scope.context, header, m.parentName + #).parse()
        m['pTmplVars'].length ? '<' + m['pTmplVars'].join(',') + '>' : ''
    ~Implements.create(scope.context, header, m.rest || '')
  scope.context.cls.ctor = ctor
  scope.types.addCtor(ctor.name())
  if m.parentName
    scope.types.setParent(ctor.parentName())
  => ctor

:parentName\s\
  => \s\(@parentFull)

:transform^
  assert(@.numBlocks() == 1, @.lines[0])
  @.params = &ParamSet(@.context, @.block(0), true)
  @.params.templateParams = @.tmplVars
  @.params.transform()
  @.block(0).transform()

:output\A\
  decl := @.params.outputDecls()
  decl.push('@constructor')
  inherit := []
  if @parentFull
    decl.push('@extends {' + @parentFull + '}')
    inherit.push([#].join(''))
      'goog.inherits(' + @.context.name.ref + ', ' + @parent + ');'
  decl.push('@struct')
  decl.push('@suppress {checkStructDictInheritance}')
  @impls.forEach(##)
    impl\~Implements\$
    decl.push(impl.ctorOutput())
  => [#]
    docLines(decl)
    @.outputFunc()
    whitespaces(@.block(0).indent) + 'var self = this;'
    @.outputBody('};')
    inherit
    @.context.cls.outputAccessors()

:setType^
  types\$type.Set\$
  @.params.setArgTypes(types.getCurrentCtor())
