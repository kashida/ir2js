::HEADER_RE = null

::
  @scope\FileScope\$
  if !%.HEADER_RE
    %.HEADER_RE = &re.Selection(#).compile
      %.Variable.re()
      %.Constructor.re()
      %.Method.re()
      %.Accessor.re()
      %.Str.re()
      %.Global.re()
      %.Native.re()
      %.Scope.re()
      %.Typedef.re()

:x_generate\%.Code\
  header\input.Line\$
  lines\A<input.Line>\$
  sec := null
  header_line := header.line.substr(1)
  if ![#].some(##)
    %.Variable.create
    %.Constructor.create
    %.Method.create
    %.Accessor.create
    %.Str.create
    %.Global.create
    %.Native.create
    %.Scope.create
    %.Typedef.create
    --
    method\F\$
    sec = method.call(undefined, @scope, header_line, header)
    if sec
      sec.lines = lines
      sec.close(@scope.context.fileName, @scope.context.pkg)
      sec.setType(@scope.types)
    => !!sec
    --
    error(header, 'line starts with colon and not a code section marker')
  => sec

:generate\%.Code\
  header\input.Line\$
  lines\A<input.Line>\$
  header_line := header.line.substr(1)
  result := HEADER_RE.x(header_line, [@scope, header_line, header])
  if !result
    error(header, 'line starts with colon and not a code section marker')
  => result
