::
  @context\!context.Context\$
  @input\input.Line\$

:pkgRef\s\
  name\s\$
  // relative package reference.
  => @context.pkg.replace(name)

:cast\s\
  type_name\s\$
  => '/** @type {' + &type.Decoder(@context.pkg, type_name).output() + '} */'

:type\s\
  type_name\s\$
  => &type.Decoder(@context.pkg, type_name).output()

:parentCall\!A\
  args\parser.TokenList\$
  end := args.isEmpty ? ')' : [', ', args, ')']
  if @context.isCtor
    => [@context.cls.ctor.parentName() + '.call(this', end]
  else if @context.isMethod
    => [[#].join(''), end]
      @context.cls.ctor.parentName()
      '.prototype.'
      @context.name.id
      '.call(this'
  else
    error(@input, 'parent call appeared in non-ctor / non-method.')
    => ['^(', args, ')']
