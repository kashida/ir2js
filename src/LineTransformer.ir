::
  @context\!context.Context\$
  @input\input.Line\$
  // TODO: This field is not used -- only 's' is set and LineParser pre-parses 
  //     for a separator.
  // '' for unknown (or statement).
  // 'p' for param line.
  // 's' for separator.
  // 't' for type.
  // 'm' for marker.
  @grammar&\s\ ''

:pkgRef\s\
  name\s\$
  // relative package reference.
  => @context.pkg.replace(name)

:cast\s\
  type_name\s\$
  => '/** @type {' + &type.Decoder(@context.pkg, type_name).output() + '} */'

:type\s\
  type_name\s\$
  => &type.Decoder(@context.pkg, type_name).output()

:parentCall\!A\
  args\parser.TokenList\$
  end := !args ? ')' : [', ', args, ')']
  if @context.isCtor
    => [@context.cls.ctor.parentName() + '.call(this', end]
  else if @context.isMethod
    => [[#].join(''), end]
      @context.cls.ctor.parentName()
      '.prototype.'
      @context.name.id
      '.call(this'
  else
    error(@input, 'parent call appeared in non-ctor / non-method.')
    => ['^(', args, ')']

:marker\!parser.BlockMarker\
  type\s\$
  => &parser.BlockMarker(type)

:paramLine\!parser.ParamLine\
  name\s\$
  member\b\$
  access\s\$
  type\s\$
  marker\s\$
  init\A\$
  => &parser.ParamLine(#)
    name
    member
    access
    @.type(type)
    marker
    &parser.TokenListBuilder(init, @).build()
