::
  @context\$context.Context\$
  @input\$input.Line\$
  // TODO: This field is not used -- only 's' is set and LineParser pre-parses 
  //     for a separator.
  // '' for unknown (or statement).
  // 'p' for param line.
  // 's' for separator.
  // 't' for type.
  // 'm' for marker.
  @grammar&\s\ ''

:pkg\s\
  => @context.pkg.toString()

:klass\s\
  if !@context.cls
    throw "Class name requested outside of class context."
  => @context.cls.name().ref

:cast\s\
  type_name\A\$
  => '/** @type {' + &$type.Decoder(@context.pkg, #).output() + '} */'
    &$parser.TokenListBuilder(type_name, @).build().str

:type\s\
  type_name\A\$
  => &$type.Decoder(@context.pkg, #).output()
    &$parser.TokenListBuilder(type_name, @).build().str

:parentCall\A\
  args\$parser.TokenList\$
  end := !args ? ')' : [', ', args, ')']
  if @context.isCtor
    => [@context.cls.ctor.parentName() + '.call(this', end]
  else if @context.isMethod
    => [[#].join(''), end]
      @context.cls.ctor.parentName()
      '.prototype.'
      @context.name.id
      '.call(this'
  else
    error(@input, 'parent call appeared in non-ctor / non-method.')
    => ['^(', args, ')']

:marker\$parser.BlockMarker\
  type\s\$
  => &$parser.BlockMarker(type)

:paramLine\$parser.ParamLine\
  name\s\$
  member\b\$
  access\s\$
  type\A\$
  marker\s\$
  init\A\$
  => &$parser.ParamLine(#)
    name
    member
    access
    &$parser.TokenListBuilder(type, @).build().str
    marker
    &$parser.TokenListBuilder(init, @).build()

:tmplAndTypeLine\$parser.TmplAndTypeLine\
  ids\A<s>\$
  type\A\$
  => &$parser.TmplAndTypeLine(#)
    ids
    &$parser.TokenListBuilder(type, @).build().str

:prepend\F\
  line\A|O|s\$
  => (##)
    tokens\$parser.TokenList\$
    tokens.prepend(&$parser.TokenListBuilder(line, @).build())
    => ''

:append\F\
  line\A|O|s\$
  => (##)
    tokens\$parser.TokenList\$
    tokens.append(&$parser.TokenListBuilder(line, @).build())
    => ''
