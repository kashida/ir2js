parse file scope and separate code sections from comments.
:!OutputSection
  GlobalComment|CodeSection

::FileScope
  pkg_name\s\$
  @context+\!Context\ new Context(new Package(pkg_name))
  @provides\A.<!Name>\ []
  @types+\TypeSet\ new TypeSet()
  @list\A.<OutputSection>\

  @context.is_file_scope = true
}

:process_lines
  input\A.<s>\$
  gen := new SectionGenerator(@)
  input_list := new InputParser(input).parse()
  @list = input_list.map(##)
    section\GlobalComment|InputSection\$
    index\n\$
    // convert InputSection to CodeSection and leave GlobalComment as is.
    => section instanceof InputSection ? gen.generate(#) : section
      section.header
      section.lines

:copy_context\!Context\
  name\!Name\$
  ctxt := @context.clone()
  ctxt.name = name
  ctxt.cls = @context.cls
  ctxt.is_file_scope = @context.is_file_scope
  => ctxt

:copy_context_with_name\!Context\
  name\string\$
  fullname := new Name(@context.pkg, name)
  @provides.push(fullname)
  => @.copy_context(fullname)

:provides\Array.<string>\
  => @provides.map(##)
    provide\Name\$
    => 'var ' + provide.ref() + ' = ' + provide.ref() + ' || {};'

:output\Array.<string>\
  => arr_flatten(@list.map(##))
    elem\OutputSection\$
    => elem.output()
