parse file scope and separate code sections from comments.
:!OutputSection
  input.Comment|section.Code

::FileScope
  file_name\s\$
  pkg_name\s\$
  @context+\!context.Context\ new context.Context(#)
    file_name
    new context.Package(pkg_name)
  @types+\TypeSet\ new TypeSet()
  @list\A.<OutputSection>\

  @context.is_file_scope = true

:process_lines
  line\A.<s>\$
  gen := new section.Generator(@)
  input_list := new input.File(@context.file_name, line).parse()
  @list = input_list.map(##)
    section\input.Comment|input.Section\$
    index\n\$
    // convert input.Section to section.Code and leave input.Comment as is.
    => section instanceof input.Section ? gen.generate(#) : section
      section.header
      section.lines

:copy_context\!context.Context\
  name\!context.Name\$
  ctxt := @context.clone()
  ctxt.name = name
  ctxt.cls = @context.cls
  ctxt.is_file_scope = @context.is_file_scope
  => ctxt

:copy_context_with_name\!context.Context\
  name\string\$
  fullname := new context.Name(@context.pkg, name)
  => @.copy_context(fullname)

:output\A.<s>\
  => arr_flatten(@list.map(##))
    elem\OutputSection\$
    => elem.output()
