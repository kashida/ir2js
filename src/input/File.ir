Parses input lines into comments and sections.
'line' is used only during processing.
::
  @name\s\$
  @input\A<s>\$
  @result\A<~Comment|~Section>\ []
  @buffer\A<~Line>\ []
  @lastValidIndex\n|-\

:parse\A<~Comment|~Section>\
  @input.forEach(##)
    line\s\$
    index\n\$
    line = line.trimRight()
    @processLine(&~Line(@name, line, index))
  @flushBuffer()
  => @result

:@processLine
  line\~Line\$
  if line.startsWithColon
    // should be a start of a code section.
    @flushBuffer()
    @lastValidIndex = 0
  else if line.isIndented
    // indented line -- continues either comment or code section.
    if @lastValidIndex != null
      @lastValidIndex = @buffer.length
  else if !line.isBlank
    // global comment.
    if @lastValidIndex != null
      // close the code section.
      @flushBuffer()
  // anything else is invalid line -- continues either comment or code section.
  @buffer.push(line)

:@flushBuffer
  while @buffer.length
    next_buffer := []
    if @lastValidIndex != null
      section := &~Section(@buffer[0])
      @result.push(section)
      @buffer.forEach(##)
        line\~Line\$
        index\n\$
        if index == 0
          // we already passed the header line to section.
          =>
        else if index <= @lastValidIndex
          section.push(line)
        else
          // end of section invaild lines.
          next_buffer.push(line)
    else
      // we'll give buffer a new array so no need to clone for global comment.
      @result.push(&~Comment(@buffer))
    @lastValidIndex = null
    @buffer = next_buffer
