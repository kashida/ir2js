Pseudo member is a place holder for class members that don't exist, but there
are accessors for.

::Member
  @name\s\$
  @type\TypeDecoder\$
  @accessType\s\$
  @isPseudo\b\$
  @declared\b\ false

returns an array with member declaration if it hasn't been output already.
returns an empty array otherwise.
:outputDecl\A.<s>\
  class_name\!context.Name\$
  if @declared
    => []
  @declared = true
  // TODO: this member decl always allows setting a value to it even when only the
  // getter is provided.
  => [#]
    '/** @type {' + @type.output() + '}' + ' */'
    class_name.property(@name).decl() + ';'

output a getter or a setter.
:outputAccessor\A\
  class_name\!context.Name\$
  is_getter\b\$
  body\A\$
  params\ParamSet\?
  p := @isPseudo && params ? params.outputParams() : 'value'
  => [#]
    is_getter ? (#) : (#)
      class_name.property('__defineGetter__').decl() + "('" + @name + "', function() {"
      --
      class_name.property('__defineSetter__').decl() + "('" + @name + "', function(" + p + ') {'
    body
    '});'

produce necessary accessor methods based on the access type specification.
:outputAccessors\A\
  class_name\!context.Name\$
  if !@accessType || @isPseudo
    => []
  result := [@.outputDecl(class_name)]
  if '+&'.indexOf(@accessType) >= 0
    result.push(@.outputAccessor(class_name, true, ['return this._' + @name + ';']))
  if '*&'.indexOf(@accessType) >= 0
    result.push(@.outputAccessor(class_name, false, ['this._' + @name + ' = value;']))
  => result
