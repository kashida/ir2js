Function parameter and / or member declarion.

::Param
  @context\!context.Context\$
  is_ctor\b\$
  inputs\input.Line\$
  parsed\parser.Result\$

  @line\parser.ParamLine\
  @success+\b\ false
  @type+\TypeDecoder\
  @value_line+\A.<parser.BlockMarker|s>\

  if !(parsed.tokens instanceof parser.ParamLine)
    =>

  @line = parsed.tokens
  @success = true
  @type = new TypeDecoder(@context.pkg, @line.type)

  @value_line = @line.init && !@line.init.is_empty ? @line.init.list : null
  if @.is_member && @.init_type != '$' && !@value_line
    // member with no initializer or optional param init.
    @value_line = ['null']

  // sanity check the param consistency.
  if !is_ctor && @.is_member
    warn(inputs, 'member param for non-constructor method')
  if !@.is_member && @.init_type != '?' && @value_line
    warn(inputs, 'initial value for non-member non-optional')

:+is_member\b\
  => @line.is_member

:+name\s\
  => @line.name

:+access_type\s\
  => @line.access

:+init_type\s\
  => @line.marker

:+has_init\b\
  => !!@value_line

:@param_name\s\
  => (@.has_init ? 'opt_' : '') + @.name

:output_decl\s\
  => @type && @.init_type != '' ? ([#].join('')) : ''
    '@param {'
    @type.output()
    @.init_type == '?' ? '=' : ''
    '} '
    @param_name()

:output_param\s\
  => @.init_type == '' ? '' : @param_name()

Variable initialization output as first statements of function body.
:output_init
  out\output.Line\$
  pname := @param_name()

  if @.is_member
    out.prefix_lines = out.prefix_lines.concat(doc_lines([#]))
      '@type {' + @type.output() + '}'
      '@private'

  if @.is_member || @.has_init
    out.line_prefix = [#].join('')
      @.is_member ? 'this._' : 'var '
      @.name
      ' = '
    if @.init_type != ''
      out.line_prefix += pname
      if @.has_init
        out.line_prefix += ' === undefined ? ('
        out.line_suffix = ') : ' + pname
    else
      out.line_prefix += '('
      out.line_suffix = ')'
  else
    out.remove_empty_lines()
    out.line_prefix = ''
    out.line_suffix = ''

:output_argtype\s\
  type := @type.output()
  re := /^\!?([a-zA-Z][\w\.]*)$/.exec(type)
  if !re
    => 'null'
  type_name := re[1]
  => ARG_TYPE_REPLACE_MAP[type_name] || type_name

:argtype\?s\
  type := @type.output()
  re := /^\!?([a-zA-Z][\w\.]*)$/.exec(type)
  if !re
    => null
  type_name := re[1]
  => ARG_TYPE_REPLACE_MAP[type_name] || type_name
