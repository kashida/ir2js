::TypeSet
  @ctor\CallableType\
  @classes\A\ []
  @functs\A\ []

:addCtor\CallableType\
  name\s\$
  @ctor = new CallableType(name)
  @classes.push(@ctor)
  => @ctor

:addFunct\CallableType\
  name\s\$
  fn := new CallableType(name)
  @functs.push(fn)
  => fn

:getCurrentCtor\CallableType\
  => @ctor

:setParent
  parent_name\s\$
  if !@ctor
    throw 'set parent called w/o ctor.'
  @ctor.setParent(parent_name)

:extract\O\
  obj := {}
  if @classes
    obj['cls'] = @classes.map(##)
      cls\TypeSet\$
      => cls.extract()
  if @functs
    obj['fns'] = @functs.map(##)
      fn\CallableType\$
      => fn.extract()
  => obj
