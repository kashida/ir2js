Function parameter and / or member declarion.
::
  @context\$context.Context\$
  is_ctor\b\$
  inputs\$input.Line\$
  parsed\$parser.Result|-\$

  @line\$parser.ParamLine|-\
  @success+\b\ false
  @type+\$type.Decoder|-\
  @valueLine+\A<$parser.BlockMarker|s>|-\
  @index&\n|-\

  if !(parsed.tokens instanceof $parser.ParamLine)
    =>

  @line = parsed.tokens
  @success = true
  @type = &$type.Decoder(@context.pkg, @line.type)

  @valueLine = @line.init && !@line.init.isEmpty ? @line.init.list : null
  if @.isMember && @.initType != '$' && !@valueLine
    // member with no initializer or optional param init.
    @valueLine = ['null']

  // sanity check the param consistency.
  if !is_ctor && @.isMember
    error(inputs, 'member param for non-constructor method')
  if !@.isMember && @.initType != '?' && @valueLine
    error(inputs, 'initial value for non-member non-optional')

:isMember+\b\
  => @line.isMember

:name+\s\
  => @line.name

:accessType+\s\
  => @line.access

:initType+\s\
  => @line.marker

:hasInit+\b\
  => !!@valueLine

:@paramName\s\
  => (@.hasInit ? 'opt_' : '') + @.name

:outputDecl\s\
  if !@type || !@.initType
    => ''
  typestr := @type.output()
  if @.initType == '?'
    typestr += '='
  if @.initType == ';'
    typestr = '...' + typestr
  => '@param {' + typestr + '} ' + @paramName()

:outputParam\s\
  => @.initType == '' ? '' : @paramName()

Variable initialization output as first statements of function body.
:outputInit
  out\$output.Line\$
  pname := @paramName()

  if !@.isMember && !@.hasInit && @.initType != ';'
    =>

  if @.isMember
    out.prefixLines = out.prefixLines.concat(docLines([#]))
      '@private {' + @type.output() + '}'

  out.linePrefix = #+
    @.isMember ? 'this._' : (@.initType == ';' ? '' : 'var ')
    @.name
    ' = '
  switch @.initType
    case '?'
    case '$'
    out.linePrefix += pname
    if @.hasInit
      out.linePrefix += ' === undefined ? ('
      out.lineSuffix = ') : ' + pname
    break

    case ';'
    out.linePrefix += 'Array.prototype.slice.call(arguments, ' + @.index + ')'
    break

    default
    out.linePrefix += '('
    out.lineSuffix = ')'

:outputArgType\s\
  type := @type.output()
  re := /^\!?([a-zA-Z][\w\.]*)$/.exec(type)
  if !re
    => 'null'
  type_name := re[1]
  => ARG_TYPE_REPLACE_MAP[type_name] || type_name

:argtype\s|-\
  type := @type.output()
  re := /^\!?([a-zA-Z_][\w\.]*)$/.exec(type)
  if !re
    => null
  type_name := re[1]
  => ARG_TYPE_REPLACE_MAP[type_name] || type_name
