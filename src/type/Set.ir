::
  @ctor\~Callable|-\
  @classes\A\ []
  @functs\A\ []

:addCtor\~Callable|-\
  name\s\$
  @ctor = &~Callable(name)
  @classes.push(@ctor)
  => @ctor

:addFunct\~Callable\
  name\s\$
  fn := &~Callable(name)
  @functs.push(fn)
  => fn

:getCurrentCtor\~Callable|-\
  => @ctor

:setParent
  parent_name\s\$
  if !@ctor
    throw 'set parent called w/o ctor.'
  @ctor.parent = parent_name

:extract\O\
  obj := {}
  if @classes
    obj['cls'] = @classes.map(##)
      cls\~\$
      => cls.extract()
  if @functs
    obj['fns'] = @functs.map(##)
      fn\~Callable\$
      => fn.extract()
  => obj
