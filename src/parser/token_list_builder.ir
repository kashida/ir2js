::TokenListBuilder
  @parsed\%.TokenList|A|O|s\$
  @pkg&\Package\?
  @tokens\%.TokenList\

:build\%.TokenList\
  if (!@tokens)
    @tokens = new %.TokenList()
    @build_rec(@parsed)
  => @tokens

:result\%.Result\
  input\!A.<InputLine>\$
  @.build()
  => new %.Result(@tokens, input)

:@build_rec
  data\%.TokenList|A|O|s\$
  if (data instanceof %.TokenList)
    @add_tokens(data)
    =>

  if (data instanceof Array)
    @add_array(data)
    =>

  if (data instanceof Object)
    @add_object(data)
    =>

  // Must be a string.
  if (data)
    @tokens.add(data)

:@add_tokens
  data\%.TokenList\$
  @tokens.add(data)

:@add_array
  data\A\$
  data.forEach(##)
    elem\%.TokenList|A|O|s\$
    @build_rec(elem)

:@add_object
  data\O\$
  if (data.g)
    switch(data.g)
      case 'p':
      t := @tokens
      p := data.params
      @tokens = new %.ParamLine(#)
        p.name
        p.member
        p.access
        new %.ParamLineBuilder(p.type).build().toString()
        p.marker
        new %.TokenListBuilder(p.init, @pkg).build()
      @tokens.add(t)
      break

      case 't':
      @.add_type_object(data.params)
      break

      case 's':
      @tokens.grammar = 's'
      break;

      case 'm':
      @tokens.add(new %.BlockMarker(data.params.type))
      break;
  if (data.t)
    @tokens.add(new %.TokenListBuilder(data.t, @pkg).build())
  if (data.p)
    @tokens.prepend(new %.TokenListBuilder(data.p, @pkg).build())
  if (data.a)
    @tokens.append(new %.TokenListBuilder(data.a, @pkg).build())

:add_type_object
  params\O\$
  t := params.type
  if (@.pkg)
    t = new TypeDecoder(@.pkg, t).output()
  @tokens.add('/** @type {' + t + '} */')


::ParamLineBuilder <%.TokenListBuilder
  parsed\%.TokenList|A|O|s\$
  pkg&\Package\?
  %(parsed, pkg)

:add_type_object
  params\O\$
  t := params.type
  if (@.pkg)
    t = new TypeDecoder(@.pkg, t).output()
  @tokens.add(t)

