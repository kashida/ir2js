::TokenListBuilder
  @parsed\%.TokenList|A|O|s\$
  @xformer&\LineTransformer\?
  @tokens\%.TokenList\

:build\%.TokenList\
  if !@tokens
    @tokens = new %.TokenList()
    @buildRec(@parsed)
  => @tokens

:result\%.Result\
  line\!A.<input.Line>\$
  @.build()
  => new %.Result(@tokens, line)

:@buildRec
  data\%.TokenList|A|O|s\$
  if data instanceof %.TokenList
    @addTokens(data)
    =>

  if data instanceof Array
    @addArray(data)
    =>

  if data instanceof Object
    @addObject(data)
    =>

  // Must be a string.
  if data
    @tokens.add(data)

:@addTokens
  data\%.TokenList\$
  @tokens.add(data)

:@addArray
  data\A\$
  data.forEach(##)
    elem\%.TokenList|A|O|s\$
    @buildRec(elem)

:@addObject
  data\O\$
  if data.g
    p := data.params
    switch data.g
      case 'c' // Current package ref.
      str := p['percents'] + '.' + p.name
      @tokens.add(@.xformer ? @.xformer.pkgRef(str) : str)
      break

      case 'e' // Parent call.
      @tokens.add(@.xformer ? @.xformer.parentCall(#) : ['^(', p.args, ')'])
        new %.TokenListBuilder(p.args, @.xformer).build().toString()
      break

      case 'm' // Marker.
      @tokens.add(new %.BlockMarker(p.type))
      break

      case 'p' // Param line.
      t := @tokens
      @tokens = new %.ParamLine(#)
        p.name
        p.member
        p.access
        new %.ParamLineBuilder(p.type, @.xformer).build().toString()
        p.marker
        new %.TokenListBuilder(p.init, @.xformer).build()
      @tokens.add(t)
      break

      case 's' // Separator line.
      @tokens.grammar = 's'
      break

      case 't' // Type literal.
      @.addTypeObject(p)
      break

  if data.t
    @tokens.add(new %.TokenListBuilder(data.t, @.xformer).build())
  if data.p
    @tokens.prepend(new %.TokenListBuilder(data.p, @.xformer).build())
  if data.a
    @tokens.append(new %.TokenListBuilder(data.a, @.xformer).build())

:addTypeObject
  params\O\$
  @tokens.add(@.xformer ? @.xformer.cast(params.type) : params.tokens)


::ParamLineBuilder <%.TokenListBuilder
  parsed\%.TokenList|A|O|s\$
  xformer&\LineTransformer\?
  ^(parsed, xformer)

:addTypeObject
  params\O\$
  @tokens.add(@.xformer ? @.xformer.type(params.type) : params.tokens)
