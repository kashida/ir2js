:Expression
a = b
true ? 0 : 1
a /= true ? 0 : 1
'abc' || abc
a := false ? 'abc' || true : "def"
  var a
  a = false ? 'abc' || true : "def"
a := b := 0
  var b
  var a
  a = b = 0
abc() && def
a *= 0 ? 'abc' && @() || true : "def"
  a *= 0 ? 'abc' && self() || true : "def"
aa == bb && cc === dd
0 <= a || 1 instanceof true
0 + -0
++(aa && bb)--
abc(#)
  abc|#p|
&abc(#)
  new abc|#p|
^('abc')
1 % %.abc % 3
%% . a
  %%.a
pkg?pkg+connector:''
  pkg ? pkg + connector : ''

:!
a =: b
0 + 'a' := true
a := 0 := b
a.%('abc')
% % a
% %.a

:PrimaryExpression
@
  self
@member
  self._member
null
102.3
[expr, expr, expr]
{ abc: expr ,  def:0 }
  {'abc': expr, 'def': 0}
expr
(expr)

:NewExpression
&expr
  new expr
&&expr
  new new expr
&self.abc[expr]
  new self.abc[expr]
&@[expr][expr].abc
  new self[expr][expr].abc
&abc(0, 1, -3).bb.c
  new abc(0, 1, -3).bb.c

:!
&expr new
&self.[expr]

:CallExpression
@.abc()
  self.abc()

:!
@.abc[()]

:MemberExpression
a.b.c
@.b
  self.b
