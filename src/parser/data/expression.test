:Expression
a = b
true ? 0 : 1
a /= true ? 0 : 1
'abc' || abc
a := false ? 'abc' || true : "def"
  var a
  a = false ? 'abc' || true : "def"
a := b := 0
  var b
  var a
  a = b = 0
abc() && def
a *= 0 ? 'abc' && @() || true : "def"
  a *= 0 ? 'abc' && _self() || true : "def"
aa == bb && cc === dd
0 <= a || 1 instanceof true
0 + -0
++(aa && bb)--
abc(#)
  abc|#p|
new abc(#)
  new abc|#p|
%('abc')

:!
a =: b
0 + 'a' := true
a := 0 := b
a.%('abc')

:PrimaryExpression
@
  _self
@member
  _self._member
null
102.3
[expr, expr, expr]
{ abc: expr ,  def:0 }
  {abc: expr, def: 0}
expr
(expr)

:NewExpression
new expr
new new expr
new self.abc[expr]
new @[expr][expr].abc
  new _self[expr][expr].abc
new abc(0, 1, -3).bb.c

:!
new expr new
new self.[expr]

:CallExpression
@.abc()
  _self.abc()

:!
@.abc[()]

:MemberExpression
a.b.c
@.b
  _self.b
