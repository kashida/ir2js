::BlockMarker
  // one character string.
  // a: array.
  // o: object.
  // p: param list.
  // f: anonymous function.
  @type+\s\$

:toString\s\
  => '|#' + @type + '|'


::TokenList
  orig\%.TokenList\?
  @list+\A.<%.BlockMarker|s>\ orig ? orig.list : []
  @prevLines+\A.<s>\ []
  @nextLines+\A.<s>\ []
  @params&\A\

:isEmpty+\b\
  if @prevLines.length || @nextLines.length
    => false
  if !@list.length
    => true
  if @list.length >= 2
    => false
  => !(@list[0] instanceof %.BlockMarker) && @list[0] == ''

:add\%.TokenList\
  args\...*\$
  i := 0
  for ; i < arguments.length; i++
    arg := arguments[i]
    if !arg
      continue

    // Recursive cases.
    if arg instanceof %.TokenList
      arg.list.forEach(##)
        token\%.BlockMarker|s\$
        @.add(token)
      arg.prevLines.forEach(##)
        l\s\$
        @prevLines.push(l)
      arg.nextLines.forEach(##)
        l\s\$
        @nextLines.push(l)
      continue
    if arg instanceof Array
      arg.forEach(##)
        token\A\$
        @.add(token)
      continue

    // Always append a marker.
    if arg instanceof %.BlockMarker
      @list.push(arg)
      continue

    // Should be a string. Append only if we can't add to the last element.
    last := @list.length - 1
    if !@list.length || @list[last] instanceof %.BlockMarker
      @list.push(arg)
      continue
    @list[last] += arg
  => @

:prepend\%.TokenList\
  line\%.TokenList|s\$
  if line instanceof %.TokenList
    @prevLines = @prevLines.concat(line.prevLines)
    @nextLines = @nextLines.concat(line.nextLines)
  str := line.toString()
  str && @prevLines.push(str)
  => @

:append
  line\%.TokenList|s\$
  if line instanceof %.TokenList
    @prevLines = @prevLines.concat(line.prevLines)
    @nextLines = @nextLines.concat(line.nextLines)
  str := line.toString()
  str && @nextLines.push(str)
  => @

:toString\s\
  => @list.join('')


::ParamLine <%.TokenList
  @name+\s\$
  @isMember+\b\$
  @access+\s\$
  @type+\s\$
  @marker+\s\$
  @init+\%.TokenList\$
  ^()

:toString\s\
  list := [#]
    @isMember ? '@' : ''
    @name
    @access
    @type
    @marker
  init_str := @init.toString()
  if init_str
    list.push(' ' + init_str)
  => list.join('')
