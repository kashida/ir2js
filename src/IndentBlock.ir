::
  @lineNo+\n\$
  @indent+\n\$
  @head\section.Head\$
  @lines\A.<SectionLine>\ []
  // TODO: type to BlockType when it's enum.
  @marker\n\ BlockType.BLOCK

:
  // TODO: enum
  BlockType := {#}
    BLOCK: 0
    FUNCTION: 1
    OBJ: 2
    ARRAY: 3
    PARAMS: 4
    LINE: 5
    COND: 6
    DOT: 7
    MULT: 8
    ADD: 9
    LOG_AND: 10
    LOG_OR: 11

  _BLOCK_OPEN   := [' {', ' {', '{', '[', '(', '(', '(',
  |'(', '(',   '(',   '(',    '(']
  _LINE_PREFIX  := ['',   '',   '',  '',  '',  '',  '(',
  |'',  '(',   '(',   '(',    '(']
  _LINE_SUFFIX  := [';',  ';',  ',', ',', ',', '',  ') :',
  |'.', ') *', ') +', ') &&', ') ||']
  _FIRST_SUFFIX := [';',  ';',  ',', ',', ',', '',  ') ?',
  |'.', ') *', ') +', ') &&', ') ||']
  _END_SUFFIX   := [';',  ';',  '',  '',  '',  '',  ')',
  |'',  ')',   ')',   ')',    ')']
  _BLOCK_CLOSE  := ['}',  '}',  '}', ']', ')', ')', ')',
  |')', ')',   ')',   ')',    ')']

:add
  line\SectionLine\$
  @lines.push(line)

:lastLine
  => @lines[@lines.length - 1]

:eachLine
  cb\function(SectionLine, n)\$
  ctxt\O\$
  @lines.forEach(cb, ctxt)

:head
  => @head

TODO: change marker's type to BlockType when it's enum.
:transform
  marker\n\?
  if marker !== undefined
    @marker = marker
  @lines.forEach(##)
    line\SectionLine\$
    if !(line instanceof InvalidLine)
      line.transform()

:startStr+\s\
  // string to open the block.
  => _BLOCK_OPEN[@marker]

:endStr+\s\
  => _BLOCK_CLOSE[@marker]

:hasValidLine+\b\
  => @lines.some(##)
    line\SectionLine\$
    => !(line instanceof InvalidLine)

:output\!output.Block\
  line_index\n\?
  // find the last valid line.
  last_index := -1
  @lines.forEach(##)
    line\SectionLine\$
    i\n\$
    if !(line instanceof InvalidLine) && !line.param
      last_index = i
  assert(#)
    #||
      last_index >= 0
      @marker == BlockType.BLOCK
      @marker == BlockType.FUNCTION
    @lines.length ? @lines[0].input : UnknownInputLine
    'block with no valid lines.'

  out := &output.Block()
  accum_suffix := ''
  valid_line_count := 0
  @lines.forEach(##)
    line\SectionLine\$
    i\n\$
    if !(line instanceof InvalidLine) && !line.param
      valid_line_count++
    if line_index !== undefined && line_index + 1 != valid_line_count
      =>
    out_line := line.output()
    if line instanceof InvalidLine || out_line.empty
      accum_suffix += out_line.lineSuffix
      out_line.lineSuffix = ''
    else
      out_line.lineSuffix = accum_suffix + out_line.lineSuffix
      if !line.isBlockStatement
        out_line.linePrefix += _LINE_PREFIX[@marker]
        out_line.lineSuffix += (#)
          i == last_index ? _END_SUFFIX[@marker] : (#)
            i == 0 ? _FIRST_SUFFIX[@marker] : _LINE_SUFFIX[@marker]
      accum_suffix = ''
    out.appendLine(out_line)
  => out
