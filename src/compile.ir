::transformToJs = ##
  base_dir\s\$
  in_file\s\$
  out_file\s\$
  pkg_name := relativeFileName(#).replace(/[\/\\]/, '.')
    base_dir
    in_file.replace(/[\/\\][^\/\\]*$/, '')
  file_name := in_file.replace(/.*[\/\\]/, '').replace(/\..*$/, '')

  c := &FileScope(in_file, pkg_name, file_name)
  c.processLines(_fs.readFileSync(in_file, 'utf-8').split('\n'))
  writeFile(out_file, c.output().join('\n'))
  writeFile(#)
    out_file.replace(/\.js$/, '.tk')
    JSON.stringify(c.types.extract())

::relativeFileName = ##
  base_dir\s\$
  file_name\s\$
  if base_dir && file_name.indexOf(base_dir) == 0
    // strip off the base_dir.
    => file_name.substr(base_dir.length).replace(/^[\/\\]*/, '')
  => file_name

::outputFileName = ##
  base_dir\s\$
  in_file\s\$
  out_dir\s\$
  => out_dir + '/' + relativeFileName(base_dir, #)
    in_file.replace(/\.ir$/, '.js')

::needCompile = ##
  src\s\$
  dst\s\$
  if !_fs.existsSync(dst)
    => true
  src_stat := _fs.statSync(src)
  dst_stat := _fs.statSync(dst)
  => src_stat.mtime.getTime() > dst_stat.mtime.getTime()

:
  exports.compileFiles = ##
    base_dir\s\$
    in_files\A<s>\$
    out_dir\s\$
    silent\b\? false
    in_files.forEach(##)
      in_file\s\$

      out_file := outputFileName(base_dir, in_file, out_dir)
      logstr := '[' + in_file + ' => ' + out_file + '] '

      if !_fs.existsSync(in_file)
        console.error(logstr + 'input not found')
        =>

      if !needCompile(in_file, out_file)
        if !silent
          console.log(logstr + 'skipping')
        =>

      if !silent
        console.log(logstr + 'compiling')
      transformToJs(base_dir, in_file, out_file)
