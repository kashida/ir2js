:=transform_to_js ##
  base_dir\s\$
  in_file\s\$
  out_file\s\$
  pkg_name := relative_file_name(#).replace(/[\/\\]/, '.')
    base_dir
    in_file.replace(/[\/\\][^\/\\]*$/, '')

  c := new FileScope(pkg_name)
  c.process_lines(_fs.readFileSync(in_file, 'utf-8').split('\n'))
  _fs.writeFileSync(#)
    out_file
    c.output().join('\n')
    'utf-8'
  _fs.writeFileSync(#)
    out_file.replace(/\.js$/, '.tk')
    JSON.stringify(c.types.extract())
    'utf-8'

:=relative_file_name ##
  base_dir\s\$
  file_name\s\$
  if base_dir && file_name.indexOf(base_dir) == 0
    // strip off the base_dir.
    => file_name.substr(base_dir.length).replace(/^[\/\\]*/, '')
  => file_name

:=output_file_name ##
  base_dir\s\$
  in_file\s\$
  out_dir\s\$
  => out_dir + '/' + relative_file_name(base_dir, #)
    in_file.replace(/\.ir$/, '.js')

:=need_compile  ##
  src\s\$
  dst\s\$
  if !_path.existsSync(dst)
    => true
  src_stat := _fs.statSync(src)
  dst_stat := _fs.statSync(dst)
  => src_stat.mtime.getTime() > dst_stat.mtime.getTime()

:=compile_files ##
  base_dir\s\$
  in_files\A.<s>\$
  out_dir\s\$
  in_files.forEach(##)
    in_file\s\$

    out_file := output_file_name(base_dir, in_file, out_dir)
    logstr := '[' + in_file + ' => ' + out_file + '] '

    if !_path.existsSync(in_file)
      console.error(logstr + 'input not found')
      =>

    if !need_compile(in_file, out_file)
      console.log(logstr + 'skipping')
      =>

    console.log(logstr + 'compiling')
    transform_to_js(base_dir, in_file, out_file)
