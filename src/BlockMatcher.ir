Match markers and blocks.

::
  @context\$context.Context\$
  @input\$input.Line\$
  @code\A<$parser.BlockMarker|s>\$
  @blocks\A<IndentBlock>\$
  @params\A<ParamSet>\ []
  @isBlockStatement+\b\ false

:transform
  @matchBlocks()
  @transformBlocks()

Returns true only if matching succeeds.
:@matchBlocks
  itr := &CodeBlockItr(@input, @code, @blocks)
  itr.blockCb = ##
    type\s\$
    with_param\b\$
    if with_param
      sub_context := @context.clone()
      sub_context.isFileScope = false
      param := &ParamSet(sub_context, @blocks[itr.bidx])
      @params.push(param)
  itr.run()
  @isBlockStatement = itr.isBlockStatement

:@transformBlocks
  itr := &CodeBlockItr(@input, @code, @blocks)
  itr.blockCb = ##
    type\s\$
    with_param\b\$
    // transform the blocks.

    // TODO: Error check number of lines in the block matches the number of
    // line markers.
    // TODO: Error check conditional block marker if the block has exactly
    // 3 lines
    if type == 'l' && itr.lidx != 0
      // Line marker block gets callback for every line.
      // Only need to transform for the first line.
      =>
    if with_param
      @params[itr.pidx].transform()
    @blocks[itr.bidx].transform({#}[type])
      b: BlockType.BLOCK
      f: BlockType.FUNCTION
      o: BlockType.OBJ
      a: BlockType.ARRAY
      p: BlockType.PARAMS
      c: BlockType.COND
      l: BlockType.LINE
      '.': BlockType.DOT
      '*': BlockType.MULT
      '+': BlockType.ADD
      '&&': BlockType.LOG_AND
      '||': BlockType.LOG_OR
  itr.run()

:output
  out\$output.Line\$
  itr := &CodeBlockItr(@input, @code, @blocks)
  itr.blockCb = ##
    type\s\$
    with_param\b\$
    block := @blocks[itr.bidx]
    if with_param
      @outputParams(out, @params[itr.pidx])
    out.lines.appendStr(block.startStr)
    out.lines.appendBlock(block.output(type == 'l' ? itr.lidx : undefined))
    out.lines.appendStr(block.endStr)
  itr.codeCb = ##
    out.lines.appendStr(\s\ (@code[itr.cidx]))
  itr.run()

:@outputParams
  out\$output.Line\$
  param\ParamSet\$
  if param.isDeclEmpty()
    out.lines.appendStr('function(' + param.outputParams() + ')')
  else
    // we don't try to merge the frg into first line.
    out.lines.terminateLine()
    out.lines.appendLines(docLines(param.outputDecls()))
    out.lines.appendStr('function(' + param.outputParams() + ')')
